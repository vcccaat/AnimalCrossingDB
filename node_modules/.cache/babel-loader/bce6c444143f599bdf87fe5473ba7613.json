{"ast":null,"code":"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar ReactBootstrapSpinner = function (_Component) {\n  inherits(ReactBootstrapSpinner, _Component);\n\n  function ReactBootstrapSpinner() {\n    classCallCheck(this, ReactBootstrapSpinner);\n    return possibleConstructorReturn(this, (ReactBootstrapSpinner.__proto__ || Object.getPrototypeOf(ReactBootstrapSpinner)).apply(this, arguments));\n  }\n\n  createClass(ReactBootstrapSpinner, [{\n    key: 'render',\n    value: function render() {\n      var type = this.props.type;\n      var divStyle = {\n        height: this.props.size + 'rem',\n        width: this.props.size + 'rem'\n      };\n      var color = this.props.color;\n      var SpinnerClass = \"spinner-\" + type + ' ' + \"text-\" + color;\n      return React.createElement('div', {\n        className: SpinnerClass,\n        style: divStyle,\n        role: 'status'\n      }, React.createElement('span', {\n        className: 'sr-only'\n      }, 'Loading...'));\n    }\n  }]);\n  return ReactBootstrapSpinner;\n}(Component);\n\nReactBootstrapSpinner.propTypes = {\n  size: PropTypes.string,\n  type: PropTypes.string,\n  color: PropTypes.string\n};\nexport default ReactBootstrapSpinner;","map":{"version":3,"sources":["../src/index.js"],"names":["ReactBootstrapSpinner","Component","propTypes","PropTypes","string","type","divStyle","color","SpinnerClass"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAIqBA,qBAAAA,GAAAA,UAAAA,UAAAA,EAAAA;;;;;;;;;;6BAOV;UACDK,IAAAA,GAAO,KAAA,KAAA,CAAb,I;UAEMC,QAAAA,GAAW;gBACP,KAAA,KAAA,CAAA,IAAA,GADO,KAAA;eAER,KAAA,KAAA,CAAA,IAAA,GAAgB;AAFR,O;UAKXC,KAAAA,GAAQ,KAAA,KAAA,CAAd,K;UAEIC,YAAAA,GAAe,aAAA,IAAA,GAAA,GAAA,GAAA,OAAA,GAAnB,K;aAGE,KAAA,CAAA,aAAA,C,KAAA,E;AAAK,QAAA,SAAA,EAAL,Y;AAA8B,QAAA,KAAA,EAA9B,Q;AAA+C,QAAA,IAAA,EAA/C;OAAA,E;AACQ,QAAA,SAAA,EAAN;sBADF,C;;;;CApBeR,CAA8BC,SAA9BD,C;;AAAAA,qBAAAA,CACZE,SADYF,GACA;QACXG,SAAAA,CADW,MAAA;QAEXA,SAAAA,CAFW,MAAA;SAGVA,SAAAA,CAAUC;AAHA,CADAJ","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport default class ReactBootstrapSpinner extends Component {\n  static propTypes = {\n    size: PropTypes.string,\n    type: PropTypes.string,\n    color: PropTypes.string,\n  }\n\n  render() {\n    const type = this.props.type;\n\n    const divStyle = {\n      height: this.props.size+'rem',\n      width: this.props.size+'rem'\n    };\n\n    const color = this.props.color;\n\n    var SpinnerClass = \"spinner-\"+type +' '+ \"text-\"+color;\n\n    return (\n      <div className={SpinnerClass} style={divStyle} role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}